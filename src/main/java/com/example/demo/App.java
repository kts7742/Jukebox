/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.demo;
import com.example.demo.entities.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.*;

import com.example.demo.commands.CommandRegistry;
import com.example.demo.repositories.IPlaylistRepository;
import com.example.demo.repositories.ISongRepository;
import com.example.demo.repositories.PlayListRepository;
import com.example.demo.repositories.SongRepository;
import com.example.demo.services.PlaylistService;
import com.example.demo.services.SongService;

public class App {

    public static void main(String[] args) {
        if (args.length != 1){
            throw new RuntimeException();
        }
        List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
        run(commandLineArgs);
    }

    public static void run(List<String> commandLineArgs){

        ISongRepository songRepository = new SongRepository();
		IPlaylistRepository playlistRepository = new PlayListRepository();
        

        // Initialize services
        SongService songService = new SongService(songRepository);
        PlaylistService playlistService = new PlaylistService(playlistRepository, songRepository);
     
        String inputFile = commandLineArgs.get(0).split("=")[1];

        try(BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
            while (true) {
                String line = reader.readLine();
                if (line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(" "));

                // Execute Services
                switch(tokens.get(0)){
					case "ADD_SONG":
					{
                        String songName = tokens.get(1);
                        String artistName = tokens.get(2);
                        String albumName = tokens.get(3);
                        String genrename = tokens.get(4);
                        Song song = songService.addSong(songName, artistName, albumName, genrename);
                        System.out.println(song);                
					}
					break;

                    case "LIST_SONGS":
					{
							List<Song> qList = songService.getSongs();
							System.out.println(qList);

					}
                    break;

					case "CREATE_PLAYLIST":
					{
                        String playlistName = tokens.get(1);
                        List<Long> list = new ArrayList<>();
                        int idx = 2;
                        while(tokens.get(idx) != null){
                            list.add(Long.parseLong(tokens.get(idx)));
                            if(tokens.get(idx).equals("8") || tokens.get(idx).equals("9")){
                                break;
                            }
                            idx++;
                        }
                        Playlist playlist = playlistService.createPlaylist(playlistName, list);
                        System.out.println(playlist);
					}
					break;

					case "LOAD_PLAYLIST":
					{
                        String name = tokens.get(1);
                        String message = playlistService.loadPlaylist(name);
                        System.out.println(message);
					}
					break;

                    case "PLAY_SONG":
                    {
                        String message = playlistService.playSong();
                        System.out.println(message);
                    }
                    break;

                    case "NEXT_SONG":
                    {
                        String message = playlistService.nextSong();
                        System.out.println(message);
                    }
                    break;

                    case "PREVIOUS_SONG":
                    {
                        String message = playlistService.previousSong();
                        System.out.println(message);
                    }
                    break;

                    case "STOP_SONG":
                    {
                        String message = playlistService.stopSong();
                        System.out.println(message);
                    }
                    break;

                    case "DELETE_PLAYLIST":
                    {
                        String name = tokens.get(1);
                        String message = playlistService.deletePlaylist(name);
                        System.out.println(message);
                    }
                    break;

                    case "ADD_SONG_TO_PLAYLIST":
                    {
                        String name = tokens.get(1);
                        Long id = Long.parseLong(tokens.get(2));
                        String message = playlistService.addSongPlaylist(name, id);
                        System.out.println(message);
                    }
                    break;

                    case "DELETE_SONG_FROM_PLAYLIST":
                    {
                        String name = tokens.get(1);
                        Long id = Long.parseLong(tokens.get(2));
                        String message = playlistService.deleteSongPlaylist(name, id);
                        System.out.println(message);
                    }
                    break;


                    default:
                        throw new RuntimeException("Invalid Command");
                }
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
